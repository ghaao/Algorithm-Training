#define MOTOR_LEFT motorC
#define MOTOR_RIGHT motorB
#define PI 3.14


int a, d;

task Forward() {
  int degree = (int)( (float)360 * ( (float)d / (float)(2*PI*2.8) );
  
  sendMessageWithParm(0, degree);
  nxtDisplayTextLine(0, " 0 %d ", degree);
  
  nMotorEncoder[motorB] = nMotorEncoder[motorC] = 0;
  motor[motorB] = motor[motorC] = 20;
  while ( nMotorEncoder[motorB] <= degree );
  
}

task Backward() {
  int degree = (int)( (float)360 * ( (float)d / (float)(2*PI*2.8) );
  
  sendMessageWithParm(1, degree);
  
  nxtDisplayTextLine(0, " 1 %d ", degree);
  
  nMotorEncoder[motorB] = nMotorEncoder[motorC] = 0;
  motor[motorB] = motor[motorC] = -20;
  while ( nMotorEncoder[motorB] >= -degree );
}

task RotateR() {
  float axis_h = 11.4/2.0;
  float radius = 2.8;
  float angle = (float)a;
  
  int degree = (int) (axis_h / radius * (float)a);

  sendMessageWithParm(2, degree);
  
  nxtDisplayTextLine(0, " 2 %d ", degree);
  nMotorEncoder[motorB] = nMotorEncoder[motorC] = 0;
  motor[motorC] =20;
  motor[motorB] = -20;
  while ( nMotorEncoder[motorC] <= degree );
}

task RotateL() {
  float axis_h = 11.4/2.0;
  float radius = 2.8;
  float angle = (float)a;
  
  int degree = (int) (axis_h / radius * (float)a);

  sendMessageWithParm(3, degree);
  
  nxtDisplayTextLine(0, " 3 %d ", degree);
  nMotorEncoder[motorB] = nMotorEncoder[motorC] = 0;
  motor[motorC] =-20;
  motor[motorB] = 20;
  while ( nMotorEncoder[motorC] <= degree );
  
}

task main() {
  int temp = 0;
  int d = 0;
  int a = 0;
  
  while(true) {
    
    wait1Msec(1000);
    temp = random(4);
   
    switch(temp) {
      case 0:
        d = random(21);
        StartTask(Forward);
        break;
      case 1:
        d = random(21);
        StartTask(Backward);
        break;
      case 2:
        a = random(181);
        StartTask(RotateR);
        break;
        case 3:
        a = random(181);
        StartTask(RotateL);
        break;
    }
  }
}